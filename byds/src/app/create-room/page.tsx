// src/app/create-room/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { GameMode } from '@/lib/types'
import { getAvailableCategories } from '@/lib/gameData'

export default function CreateRoomPage() {
  const [name, setName] = useState('')
  const [maxPlayers, setMax] = useState(4)
  const [gameMode, setGameMode] = useState<GameMode>('‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°')
  const [category, setCat] = useState('')
  const router = useRouter()
  const searchParams = useSearchParams()

  useEffect(() => {
    const modeParam = searchParams.get('mode')
    if (modeParam === '‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°' || modeParam === '‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°') {
      setGameMode(modeParam as GameMode)
    }
  }, [searchParams])

  const availableCategories = getAvailableCategories(gameMode)

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    const selectedCategory = category || availableCategories[0]
    const res = await fetch('/api/rooms', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name, maxPlayers, gameMode, category: selectedCategory }),
    })
    if (!res.ok) return alert('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
    const room = await res.json()
    router.push(`/lobby/${room.id}`)
  }

  return (
    <div className="min-h-screen py-12 px-4">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white rounded-2xl shadow-xl p-8 border border-purple-100">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-2">
              ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏°
            </h2>
            <p className="text-gray-600">‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å!</p>
          </div>
          
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á</label>
              <input
                required
                placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏∏‡∏Å‡πÜ"
                value={name}
                onChange={e => setName(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏Å‡∏°</label>
              <div className="grid gap-4">
                <button
                  type="button"
                  onClick={() => setGameMode('‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°')}
                  className={`p-4 rounded-xl text-left transition-all ${
                    gameMode === '‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°'
                      ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg'
                      : 'border-2 border-gray-200 hover:border-purple-300 hover:bg-purple-50'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">üé≠</span>
                    <div>
                      <div className="font-bold">‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°</div>
                      <div className={`text-sm ${gameMode === '‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°' ? 'text-purple-100' : 'text-gray-500'}`}>
                        ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡πÅ‡∏ï‡πà‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≥
                      </div>
                    </div>
                  </div>
                </button>
                <button
                  type="button"
                  onClick={() => setGameMode('‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°')}
                  className={`p-4 rounded-xl text-left transition-all ${
                    gameMode === '‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°'
                      ? 'bg-gradient-to-r from-pink-600 to-purple-600 text-white shadow-lg'
                      : 'border-2 border-gray-200 hover:border-purple-300 hover:bg-purple-50'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">ü§ê</span>
                    <div>
                      <div className="font-bold">‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏° (‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏ó‡∏û‡∏•‡∏µ‡∏•‡∏≤)</div>
                      <div className={`text-sm ${gameMode === '‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°' ? 'text-purple-100' : 'text-gray-500'}`}>
                        ‡∏û‡∏π‡∏î‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏ï‡πà‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°
                      </div>
                    </div>
                  </div>
                </button>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô</label>
              <div className="flex space-x-2">
                {[2, 3, 4, 5, 6].map(n => (
                  <button
                    key={n}
                    type="button"
                    onClick={() => setMax(n)}
                    className={`flex-1 py-3 rounded-xl text-center font-semibold transition-all ${
                      maxPlayers === n
                        ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg'
                        : 'border-2 border-gray-200 hover:border-purple-300 hover:bg-purple-50 text-gray-700'
                    }`}
                  >
                    {n}
                  </button>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</label>
              <select
                value={category}
                onChange={e => setCat(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
              >
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà...</option>
                {availableCategories.map(cat => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </select>
            </div>

            <button
              type="submit"
              className="w-full py-4 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl text-lg font-semibold hover:from-purple-700 hover:to-pink-700 transition-all duration-300 transform hover:scale-105 shadow-lg"
            >
              ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á üöÄ
            </button>
          </form>
        </div>
      </div>
    </div>
  )
}
